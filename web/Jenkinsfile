pipeline {
    agent any
    parameters {
        string(name: 'Instance_ID', description: 'Enter your EC2 instance ID')
        string(name: 'REPO_URL', description: 'Enter the GitHub repository URL')
        string(name: 'AwsRegion', description: 'Enter your AWS region')
    }
    environment {
        AWS_REGION = "${params.AwsRegion}"
        AWS_SESSION_TOKEN = credentials('session-token')
    }
    stages {
        stage('Get EC2 Public IP') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        env.EC2_IP = sh(
                            script: "aws ec2 describe-instances --instance-ids ${params.Instance_ID} --region ${env.AWS_REGION} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text",
                            returnStdout: true
                        ).trim()
                    }
                }
            }
        }

        stage('Clone GitHub Repository') {
            steps {
                script {
                    // Extract repository name from REPO_URL
                    env.REPO_NAME = sh(
                        script: "basename -s .git ${params.REPO_URL}",
                        returnStdout: true
                    ).trim()
                    
                    sshagent(['ec2-ssh-key']) {
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@${env.EC2_IP} 'git clone ${params.REPO_URL}'"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sshagent(['ec2-ssh-key']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ubuntu@${env.EC2_IP} '
                            cd ${env.REPO_NAME} &&
                            if [ -f Dockerfile ]; then
                                sudo docker build -t my-app .
                            else
                                echo "Dockerfile not found!" && exit 1
                            fi
                            '
                        """
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    sshagent(['ec2-ssh-key']) {
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@${env.EC2_IP} 'sudo docker run -d -p 8081:8081 my-app'"
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Docker container started successfully!'
        }
        failure {
            echo 'Failed to start Docker container. Please check the logs for details.'
        }
        always {
            cleanWs()
        }
    }
}
