pipeline {
    agent any

    environment {
        SSH_KEY = credentials('ec2-ssh-key')
        AWS_SESSION_TOKEN = credentials('session-token')

    }

    parameters {
        string(name: 'STACK_NAME', description: 'Enter your stack name')
        string(name: 'DOCKER_IMAGE', description: 'Enter your Docker Image')
    }

    stages {
        stage('Retrieve Instance Details') {
            steps {
                // Copy the archived file from the first job
                copyArtifacts(projectName: 'JavaApp', filter: 'instance_details.txt', target: '.', flatten: true)

                // Read the instance details from the file
                script {
                    def instanceDetails = readFile('instance_details.txt').trim()
                    def instanceMap = [:]
                    instanceDetails.split('\n').each { line ->
                        def (key, value) = line.split('=')
                        instanceMap[key] = value
                    }
                    env.INSTANCE_ID = instanceMap['INSTANCE_ID']
                    env.PUBLIC_DNS = instanceMap['EC2_IP']
                    echo "EC2 Instance ID: ${env.INSTANCE_ID}"
                    echo "EC2 Public DNS: ${env.PUBLIC_DNS}"
                }
            }
        }

        stage('Install Docker on EC2') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                ]]) {
                    sshagent(['your-ssh-key-credentials-id']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ec2-user@${env.PUBLIC_DNS} '
                                sudo docker pull ${params.DOCKER_IMAGE} && 
                                sudo docker run -d -p 8081:8081 ${params.DOCKER_IMAGE}
                            '
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        failure {
            echo 'Build failed. Please check the logs for details.'
        }
        success {
            echo 'Build succeeded!'
        }
    }
}
