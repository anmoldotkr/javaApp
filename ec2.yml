AWSTemplateFormatVersion: '2010-09-09'
Description: Build a JavaWebapp stack with CloudFormation

Parameters:
  ImageId:
    Type: String
  InstanceType:
    Type: String
  KeyName:
    Type: String
  environment:
    Type: String
    AllowedValues:
      - dev
      - stage
      - testing
    Default: dev
  product:
    Type: String
    Default: Training
  service:
    Type: String
    Default: vpc

Resources:
  WebAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          SubnetId: !ImportValue 
            'Fn::Sub': '${environment}-${product}-${service}-subnet-id'
          DeviceIndex: 0
          GroupSet:
            - !ImportValue 
                'Fn::Sub': '${environment}-${product}-${service}-sg-id'
      Tags:
        - Key: Name
          Value: WebAppInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker

Outputs:
  InstanceId:
    Description: The Instance ID
    Value: !Ref WebAppInstance
  PublicIp:
    Description: The Public IP of the instance
    Value: !GetAtt WebAppInstance.PublicIp

  VpcId:
    Description: The VPC Id
    Value: !ImportValue 
      'Fn::Sub': '${environment}-${product}-${service}-vpc-id'
  SubnetId:
    Description: The Subnet Id
    Value: !ImportValue 
      'Fn::Sub': '${environment}-${product}-${service}-subnet-id'
  SecurityGroupId:
    Description: The Security Group Id
    Value: !ImportValue 
      'Fn::Sub': '${environment}-${product}-${service}-sg-id'
  RouteTableId:
    Description: The Route Table Id
    Value: !ImportValue 
      'Fn::Sub': '${environment}-${product}-${service}-rt-id'
